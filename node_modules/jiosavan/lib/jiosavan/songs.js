"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var formatter_1 = require("../utils/formatter");
var request_1 = require("../utils/request");
var endpoints_1 = require("../utils/endpoints");
/**
 *
 * @param {string} id id of the song
 * @param {boolean} lyrics true or false
 * @returns songs data with lyrics
 */
var getSong = function (id, lyrics) { return __awaiter(void 0, void 0, void 0, function () {
    var ly, song, formattedRes, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                ly = lyrics ? lyrics : false;
                return [4 /*yield*/, request_1.default(endpoints_1.default.songDetailsBaseUrl + id)];
            case 1:
                song = _a.sent();
                formattedRes = formatter_1.default.songResponse(song[id], ly);
                return [2 /*return*/, formattedRes];
            case 2:
                err_1 = _a.sent();
                return [2 /*return*/, err_1];
            case 3: return [2 /*return*/];
        }
    });
}); };
var getSongs = function (ids, lyrics) { return __awaiter(void 0, void 0, void 0, function () {
    var ly_1, allResponses, err_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                ly_1 = lyrics ? lyrics : false;
                return [4 /*yield*/, Promise.all(ids.map(function (id) { return getSong(id, ly_1).then(function (r) { return r; }); }))];
            case 1:
                allResponses = _a.sent();
                return [2 /*return*/, allResponses];
            case 2:
                err_2 = _a.sent();
                return [2 /*return*/, err_2];
            case 3: return [2 /*return*/];
        }
    });
}); };
/**
 *
 * @param {string} id id of the song
 * @returns lyrics of the song
 */
var getLyrics = function (id) { return __awaiter(void 0, void 0, void 0, function () {
    var song, err_3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, request_1.default(endpoints_1.default.lyricsBaseUrl + id)];
            case 1:
                song = _a.sent();
                return [2 /*return*/, song];
            case 2:
                err_3 = _a.sent();
                return [2 /*return*/, err_3];
            case 3: return [2 /*return*/];
        }
    });
}); };
/**
 *
 * @param {string} id id of the album
 * @param {boolean} lyrics true or false
 * @returns album data
 */
var getAlbum = function (id, lyrics) { return __awaiter(void 0, void 0, void 0, function () {
    var ly, albumData, formattedRes, err_4;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                ly = lyrics ? lyrics : false;
                return [4 /*yield*/, request_1.default(endpoints_1.default.albumDetailsBaseUrl + id)];
            case 1:
                albumData = _a.sent();
                formattedRes = formatter_1.default.albumResponse(albumData, ly);
                return [2 /*return*/, formattedRes];
            case 2:
                err_4 = _a.sent();
                return [2 /*return*/, err_4];
            case 3: return [2 /*return*/];
        }
    });
}); };
/**
 *
 * @param {string} id  id of the playlist
 * @param {boolean} lyrics true or false
 * @returns  playlist data
 */
var getPlaylist = function (id, lyrics) { return __awaiter(void 0, void 0, void 0, function () {
    var ly, albumData, formattedRes, err_5;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                ly = lyrics ? lyrics : false;
                return [4 /*yield*/, request_1.default(endpoints_1.default.playlistDetailsBaseUrl + id)];
            case 1:
                albumData = _a.sent();
                formattedRes = formatter_1.default.playListResponse(albumData, ly);
                return [2 /*return*/, formattedRes];
            case 2:
                err_5 = _a.sent();
                return [2 /*return*/, err_5];
            case 3: return [2 /*return*/];
        }
    });
}); };
exports.default = {
    getSong: getSong,
    getLyrics: getLyrics,
    getAlbum: getAlbum,
    getPlaylist: getPlaylist,
    getSongs: getSongs,
};
